#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef STRIPETERMINAL_SWIFT_H
#define STRIPETERMINAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="StripeTerminal",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class SCPLocalMobileConnectionConfiguration;
@protocol SCPAppleBuiltInReaderAccountLinkingDelegate;
@protocol SCPAppleBuiltInReaderPrepareDelegate;
@protocol SCPAppleBuiltInReaderTransactionDelegate;
enum SCPAppleBuiltInReaderTransactionType : NSInteger;
@class NSDecimalNumber;

/// Bridge class protocol for the Apple Built-In reader API.
/// The ProximityReader framework in which it is exposed leverages Swift Concurrency and is
/// not Objective-C compatible. The core of the Stripe Terminal SDK remains written in Objective-C.
/// This protocol defines and interface to convert between Swift Concurrency callbacks
/// and delegate callbacks.
/// A protocol is defined so that the on-device implementation and the iOS Simulator stub
/// implementation of the bridge expose a consistent interface. Further, the protocol
/// avoids duplication of documentation and common functionality.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderProtocol")
@protocol SCPAppleBuiltInReader <NSObject>
/// Determines whether the use of the Apple Built-In reader adapter is supported on the
/// current mobile device.
/// \param simulated Whether the check should be made against simulated readers.
///
///
/// throws:
/// An error with a best-effort determination as to why the specified
/// configuration is not supported on the running mobile device.
+ (BOOL)isSupportedWithSimulated:(BOOL)simulated error:(NSError * _Nullable * _Nullable)error;
/// Determines whether the current device supports Apple Built-In readers and, if so, returns
/// a set of the associated unique reader identifiers.
/// note:
/// An empty set of readers is never returned.
/// \param completion Invoked asynchronously.
/// If successful, invoked with a set of discovered reader identifiers.
/// If unsuccessful, invoked with an <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
+ (void)discoverAvailableReaderIdentifiersWithCompletion:(void (^ _Nonnull)(NSSet<NSString *> * _Nullable, NSError * _Nullable))completion;
/// This reader identifier is linked to the lifecycle of the merchant application on the device:
/// <ul>
///   <li>
///     When the application is uninstalled and re-installed, a new ID will be generated †
///   </li>
///   <li>
///     The ID is unique per merchant application installed on the same device
///   </li>
///   <li>
///     The ID is persisted between Reader initializations
///   </li>
///   <li>
///     When a merchant application initializes a Reader on two different devices,
///     each installation on each device will have a unique ID.
///   </li>
/// </ul>
/// † The ID will be reset only if all the apps from the same Vendor are uninstalled, with the following rule:
/// If the Vendor has multiple apps:
/// <ul>
///   <li>
///     com.example.app.app1
///   </li>
///   <li>
///     com.example.app.app2
///   </li>
/// </ul>
/// These 2 apps will have a different ID but their ID will only be reset if both app are uninstalled.
@property (nonatomic, readonly, copy) NSString * _Nonnull readerIdentifier;
/// Indicates whether the receiver is simulated or interacts with the ProximityReader framework.
@property (nonatomic, readonly) BOOL isSimulated;
/// Cached connection configuration provided by encompassing application
@property (nonatomic, readonly, strong) SCPLocalMobileConnectionConfiguration * _Nonnull connectionConfiguration;
/// Armada generated merchant reference associated with a Reader session
/// This reference string corresponds to the token used to initialize the reader,
/// and is needed in subsequent payment requests.
@property (nonatomic, copy) NSString * _Nullable merchantReference;
/// Delegate specific to the merchant account linking process.
@property (nonatomic, weak) id <SCPAppleBuiltInReaderAccountLinkingDelegate> _Nullable accountLinkingDelegate;
/// Delegate specific to the reader preparation process.
@property (nonatomic, weak) id <SCPAppleBuiltInReaderPrepareDelegate> _Nullable prepareDelegate;
/// Delegate specific to the process of performing a transaction.
@property (nonatomic, weak) id <SCPAppleBuiltInReaderTransactionDelegate> _Nullable transactionDelegate;
/// \param crid The unique identifier associated with the reader.
///
/// \param connectionConfiguration Local mobile connection configuration.
///
/// \param isSimulated A boolean indication the receiver should be created in simulation mode.
///
///
/// returns:
/// A new instance of the receiver, configured and optionally simulated.
- (nonnull instancetype)initWithReaderIdentifier:(NSString * _Nonnull)crid connectionConfiguration:(SCPLocalMobileConnectionConfiguration * _Nonnull)connectionConfiguration isSimulated:(BOOL)isSimulated;
/// Link the receiver using the specified token.
/// The linking process must be completed successfully prior to preparing the reader to collect payments.
/// note:
/// Not available on simulated readers.
/// \param token Reader token.
///
/// \param merchantReference Merchant reference.
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)linkAccountUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
/// Prepare the receiver to collect payments using the specified token.
/// Note that the account linking process must be completed successfully prior to preparing the
/// reader to accept payments.
/// note:
/// Not available on simulated readers.
/// \param token Reader token.
///
/// \param merchantReference Merchant reference.
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)prepareUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
/// Cancel an in-flight transaction.
/// note:
/// Not available on simulated readers.
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)cancelTransactionAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Perform a transaction.
/// note:
/// Not available on simulated readers.
/// \param amount Amount to charge or refund.
/// This should be a positive amount regardless of purchase or refund.
/// For a verification transaction type, value should be nil.
///
/// \param currencyCode Currencies are expressed as three character strings.
/// These will usually be ISO 4217 compliant, but are not guaranteed to be
/// (since not all currencies are expressable by ISO 4217).
///
/// \param transactionType The kind of the transaction. 
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)performTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
/// Capture a PIN for a previously completed transaction attempt.
/// note:
/// Not available on simulated readers.
/// note:
/// Uses the same delegate callbacks as <code>AppleBuiltInReaderProtocol.performTransaction(type:amount:currencyCode:)</code>
/// \param token Valid and signed PIN token.
/// The token is valid for no more than 55 seconds from issue.
/// This token is returned in the first attempt to confirm a payment which requires PIN capture.
///
/// \param cardReaderTransactionID Identifier of the transaction associated with the PIN
/// capture attempt. This value is returned as <code>paymentCardId</code> in the <code>AppleBuiltInReaderTransactionDelegate</code>’s
/// <code>appleBuiltInReader(_:didCollectPaymentCard:generalCardData:paymentCardId:merchantReference:)</code>
/// delegate method.
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)capturePINUsingToken:(NSString * _Nonnull)token cardReaderTransactionID:(NSString * _Nonnull)cardReaderTransactionID error:(NSError * _Nullable * _Nullable)error;
/// Perform a mock transaction.
/// \param amount Amount to charge or refund.
/// It should be a positve amount regardless of purchase or refund.
/// For a verification transaction type, value should be nil.
///
/// \param currencyCode Currencies are expressed as three character strings.
/// These will usually be ISO 4217 compliant, but are not guaranteed to be
/// (since not all currencies are expressable by ISO 4217).
///
/// \param transactionType The kind of the transaction. 
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)performMockTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
@end


/// The ProximityReader framework is not available when building for iPhone Simulator.
/// This stub implementation of the Apple Built-In Reader protocol exposes the same API as the
/// version that runs on device - but only supports simulated readers and does not
/// reference the ProximityReader framework.
/// note:
/// Like the on-device implementation, iOS 16.0 or later is required.
/// seealso:
/// AppleBuiltInReaderProtocol
SWIFT_CLASS_NAMED("AppleBuiltInReader")
@interface SCPAppleBuiltInReader : NSObject <SCPAppleBuiltInReader>
+ (BOOL)isSupportedWithSimulated:(BOOL)simulated error:(NSError * _Nullable * _Nullable)error;
+ (void)discoverAvailableReaderIdentifiersWithCompletion:(void (^ _Nonnull)(NSSet<NSString *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithReaderIdentifier:(NSString * _Nonnull)crid connectionConfiguration:(SCPLocalMobileConnectionConfiguration * _Nonnull)connectionConfiguration isSimulated:(BOOL)isSimulated OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull readerIdentifier;
@property (nonatomic, readonly) BOOL isSimulated;
@property (nonatomic, readonly, strong) SCPLocalMobileConnectionConfiguration * _Nonnull connectionConfiguration;
@property (nonatomic, copy) NSString * _Nullable merchantReference;
@property (nonatomic, weak) id <SCPAppleBuiltInReaderAccountLinkingDelegate> _Nullable accountLinkingDelegate;
@property (nonatomic, weak) id <SCPAppleBuiltInReaderPrepareDelegate> _Nullable prepareDelegate;
@property (nonatomic, weak) id <SCPAppleBuiltInReaderTransactionDelegate> _Nullable transactionDelegate;
- (BOOL)linkAccountUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
- (BOOL)prepareUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
- (BOOL)cancelTransactionAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)performTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
- (BOOL)capturePINUsingToken:(NSString * _Nonnull)token cardReaderTransactionID:(NSString * _Nonnull)cardReaderTransactionID error:(NSError * _Nullable * _Nullable)error;
- (BOOL)performMockTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Delegate methods pertaining to the process of linking a merchant account.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderAccountLinkingDelegate")
@protocol SCPAppleBuiltInReaderAccountLinkingDelegate <NSObject>
/// The specified merchant account was successfully linked.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidLinkAccount:(id <SCPAppleBuiltInReader> _Nonnull)reader;
/// The specified merchant account was already successfully linked with the receiver.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidPreviouslyLinkAccount:(id <SCPAppleBuiltInReader> _Nonnull)reader;
/// An error occurred while attempting to link the specified merchant account with the receiver.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToLinkAccountWithError:(NSError * _Nonnull)error;
@end

/// The ProximityReader framework exports a few different error enumerations, however they are
/// not Objective-C compatible. This enumeration is an Objective-C compatible superset of all relevant errors from the
/// the ProximityReader framework.
typedef SWIFT_ENUM_NAMED(NSInteger, SCPAppleBuiltInReaderErrorCode, "AppleBuiltInReaderErrorCode", open) {
/// An unknown error.
  SCPAppleBuiltInReaderErrorCodeUnknown = 0,
/// An SDK error indicating that an unexpected <code>nil</code> value was encountered.
  SCPAppleBuiltInReaderErrorCodeUnexpectedNil = 1,
/// An invalid transaction type was specified for the current operation.
  SCPAppleBuiltInReaderErrorCodeInvalidTransactionType = 2,
/// The mobile device must have a passcode enabled to use the Apple Built-In reader.
  SCPAppleBuiltInReaderErrorCodePasscodeDisabled = 3,
/// Usually indicates entitlement, invalid application bundle, configuration issue or partner token issue.
  SCPAppleBuiltInReaderErrorCodeNotAllowed = 4,
/// It is not possible to interact with the Apple Built-In reader while the app is backgrounded.
  SCPAppleBuiltInReaderErrorCodeBackgroundRequestNotAllowed = 5,
/// Unsupported hardware, problem with the device.
  SCPAppleBuiltInReaderErrorCodeUnsupported = 6,
/// Current OS version is not supported.
  SCPAppleBuiltInReaderErrorCodeOsVersionNotSupported = 7,
/// Device model is not supported.
  SCPAppleBuiltInReaderErrorCodeModelNotSupported = 8,
/// Network error, unable to reach server.
  SCPAppleBuiltInReaderErrorCodeNetworkError = 9,
/// Authentication during connection to server
  SCPAppleBuiltInReaderErrorCodeNetworkAuthenticationError = 10,
/// Unable to connect to internal service.
  SCPAppleBuiltInReaderErrorCodeServiceConnectionError = 11,
/// Reader session is not ready. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeNotReady = 12,
/// Reader token not valid, cannot be empty.
  SCPAppleBuiltInReaderErrorCodeEmptyReaderToken = 13,
/// Reader token not valid, check description for more details.
  SCPAppleBuiltInReaderErrorCodeInvalidReaderToken = 14,
/// Prepare failed, config setup issues. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodePrepareFailed = 15,
/// Reader session expired, too long since last used. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodePrepareExpired = 16,
/// Reader token is expired. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeTokenExpired = 17,
/// This device cannot be used to process using the Apple Built-In reader anymore.
  SCPAppleBuiltInReaderErrorCodeDeviceBanned = 18,
/// Reader internal memory full.
  SCPAppleBuiltInReaderErrorCodeReaderMemoryFull = 19,
/// Reader is busy, unable to prepare the reader. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeReaderBusy = 20,
/// The merchant account is not linked. Link the account and re-initialize the connection.
  SCPAppleBuiltInReaderErrorCodeAccountNotLinked = 21,
/// Failed to link merchant to this Apple ID. Ensure Apple ID is still active and in a good standing and try again.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingFailed = 22,
/// Linking the merchant requires iCloud sign in.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingRequiresiCloudSignIn = 23,
/// An error indicating the user cancelled the linking operation.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingCancelled = 24,
/// An error that indicates the system couldn’t check the account status of the merchant.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingCheckFailed = 25,
/// Merchant is blocked.
  SCPAppleBuiltInReaderErrorCodeMerchantBlocked = 26,
/// Merchant is invalid.
  SCPAppleBuiltInReaderErrorCodeInvalidMerchant = 27,
/// Read not allowed at this time. Validate entitlements to proceed.
  SCPAppleBuiltInReaderErrorCodeReadNotAllowed = 28,
/// It is not possible to interact with the Apple Built-In reader while the app is backgrounded.
  SCPAppleBuiltInReaderErrorCodeReadFromBackgroundError = 29,
/// Unable to connect to internal UI or other services.
  SCPAppleBuiltInReaderErrorCodeReaderServiceConnectionError = 30,
/// General reader service internal state issue, unexpected error, etc…
  SCPAppleBuiltInReaderErrorCodeReaderServiceError = 31,
/// No reader session or not ready. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeNoReaderSession = 32,
/// Reader session expired and unable to refresh. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeReaderSessionExpired = 33,
/// Unable to refresh reader session as configuration token is expired. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeReaderTokenExpired = 34,
/// Unable to refresh reader session due to network error.
  SCPAppleBuiltInReaderErrorCodeReaderSessionNetworkError = 35,
/// Auth error, while refreshing reader session.
  SCPAppleBuiltInReaderErrorCodeReaderSessionAuthenticationError = 36,
/// Reader is busy with another session. Try again later.
  SCPAppleBuiltInReaderErrorCodeReaderSessionBusy = 37,
/// Current read or reader session cancelled.
  SCPAppleBuiltInReaderErrorCodeReadCancelled = 38,
/// Invalid amount, must be a positive.
  SCPAppleBuiltInReaderErrorCodeInvalidAmount = 39,
/// Invalid or unsupported currency code.
  SCPAppleBuiltInReaderErrorCodeInvalidCurrency = 40,
/// NFC is disabled. NFC must be enabled to proceed.
  SCPAppleBuiltInReaderErrorCodeNfcDisabled = 41,
/// It is not possible to interact with the Apple Built-In reader while the app is backgrounded.
  SCPAppleBuiltInReaderErrorCodeReadNotAllowedDuringCall = 42,
/// An error occurred while attempting to read the payment card.
  SCPAppleBuiltInReaderErrorCodeCardReadFailed = 43,
/// Unable to proceed with payment read due to internal failure.
  SCPAppleBuiltInReaderErrorCodePaymentReadFailed = 44,
/// The payment card declined the transaction.
  SCPAppleBuiltInReaderErrorCodePaymentCardDeclined = 45,
/// The preferred AID specified in the transaction request is invalid.
  SCPAppleBuiltInReaderErrorCodeInvalidPreferredAID = 46,
/// An error occurred when capturing the PIN.
  SCPAppleBuiltInReaderErrorCodePinEntryFailed = 47,
/// An error that indicates an invalid PIN token.
  SCPAppleBuiltInReaderErrorCodePinTokenInvalid = 48,
/// The current PIN capture was not completed in allowed time.
  SCPAppleBuiltInReaderErrorCodePinEntryTimeout = 49,
/// The current PIN capture was cancelled, also cancelling any ongoing read operation.
  SCPAppleBuiltInReaderErrorCodePinCancelled = 50,
/// The time window allowing for a PIN capture after a card read has expired.
  SCPAppleBuiltInReaderErrorCodePinNotAllowed = 51,
};


/// Delegate methods pertaining to the process of preparing an Apple Built-In reader.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderPrepareDelegate")
@protocol SCPAppleBuiltInReaderPrepareDelegate <NSObject>
/// The receiver reported progress during the preparation step.
/// \param reader Apple Built-In reader.
///
/// \param progress Reader preparation progress in the range (0, 1).
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didReportPrepareProgress:(float)progress;
/// The receiver was prepared successfully.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidPrepare:(id <SCPAppleBuiltInReader> _Nonnull)reader;
/// The receiver could not be prepared successfully.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToPrepareWithError:(NSError * _Nonnull)error;
@end


@class SCPAppleBuiltInReaderTransactionEvent;

/// Delegate methods pertaining to carrying out transactions.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderTransactionDelegate")
@protocol SCPAppleBuiltInReaderTransactionDelegate <NSObject>
/// An attempt to perform a transaction completed successfully.
/// \param reader Apple Built-In reader.
///
/// \param data Encrypted EMV blob associated with the payment card suitable for transaction processing.
///
/// \param generalCardData Un-encrypted EMV blob associated with the payment card.
///
/// \param paymentCardId An identifier associated with the payment card.
///
/// \param merchantReference Merchant reference.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didCollectPaymentCard:(NSString * _Nullable)data generalCardData:(NSString * _Nullable)generalCardData paymentCardId:(NSString * _Nonnull)paymentCardId merchantReference:(NSString * _Nonnull)merchantReference;
/// An attempt to perform a transaction failed.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToPerformTransaction:(NSError * _Nonnull)error;
/// The receiver reported a transaction event.
/// \param reader Apple Built-In reader.
///
/// \param event A model describing a step in the transaction flow.
/// Not suitable for presentation to a user.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didReportTransactionEvent:(SCPAppleBuiltInReaderTransactionEvent * _Nonnull)event;
/// An attempt to cancel a transaction failed.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToCancelTransaction:(NSError * _Nonnull)error;
/// A mock transaction completed successfully.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidCompleteMockTransaction:(id <SCPAppleBuiltInReader> _Nonnull)reader;
@end

enum SCPAppleBuiltInReaderTransactionEventCode : NSInteger;

/// Apple Built-In Reader Transaction Event.
/// This class wraps a transaction event code and associated metadata into an Objective-C
/// compatable object representation.
SWIFT_CLASS_NAMED("AppleBuiltInReaderTransactionEvent")
@interface SCPAppleBuiltInReaderTransactionEvent : NSObject
/// The name of the reader transaction event suitable for logging.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Transaction event code.
@property (nonatomic, readonly) enum SCPAppleBuiltInReaderTransactionEventCode code;
///
/// returns:
/// A new instance of the receiver configured with an <code>unknown</code> event.
- (nonnull instancetype)init;
- (BOOL)isEqualToTransactionEvent:(SCPAppleBuiltInReaderTransactionEvent * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
@end

/// This enumeration is an Objective-C compatible representation of all transaction-related events
/// re-exported from the ProximityReader framework.
typedef SWIFT_ENUM_NAMED(NSInteger, SCPAppleBuiltInReaderTransactionEventCode, "AppleBuiltInReaderTransactionEventCode", open) {
/// Unknown reader event code.
  SCPAppleBuiltInReaderTransactionEventCodeUnknown = 0,
/// The reader is ready for someone to move their card within range of the iPhone.
  SCPAppleBuiltInReaderTransactionEventCodeReadyForTap = 1,
/// The reader detected the presence of a card.
  SCPAppleBuiltInReaderTransactionEventCodeCardDetected = 2,
/// The consumer can move the card away from the device.
  SCPAppleBuiltInReaderTransactionEventCodeRemoveCard = 3,
/// The reader completed the card read process.
  SCPAppleBuiltInReaderTransactionEventCodeCompleted = 4,
/// A visual indication has been presented requesting the customer try again.
  SCPAppleBuiltInReaderTransactionEventCodeRetry = 5,
/// A read operation was canceled.
  SCPAppleBuiltInReaderTransactionEventCodeReadCanceled = 6,
/// The read operation did not complete.
  SCPAppleBuiltInReaderTransactionEventCodeReadNotCompleted = 7,
/// PIN entry was requested.
  SCPAppleBuiltInReaderTransactionEventCodePinEntryRequested = 8,
/// PIN entry was completed.
  SCPAppleBuiltInReaderTransactionEventCodePinEntryCompleted = 9,
};

/// The kind of a transaction.
typedef SWIFT_ENUM_NAMED(NSInteger, SCPAppleBuiltInReaderTransactionType, "AppleBuiltInReaderTransactionType", open) {
  SCPAppleBuiltInReaderTransactionTypeUnknown = 0,
/// Charge the specified amount.
  SCPAppleBuiltInReaderTransactionTypePurchase = 1,
/// Refund the specified amount.
  SCPAppleBuiltInReaderTransactionTypeRefund = 2,
/// Perform card verification.
  SCPAppleBuiltInReaderTransactionTypeVerification = 3,
};


@interface NSError (SWIFT_EXTENSION(StripeTerminal))
/// Apple Built-In reader error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorDomain;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info error name key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoNameKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoNameKey SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info reader message key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoReaderMessageKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoReaderMessageKey SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info device banned until date key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoDeviceBannedUntilDateKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoDeviceBannedUntilDateKey SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info device prepare failed reason key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoPrepareFailedReasonKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoPrepareFailedReasonKey SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.unknown</code>
///
/// returns:
/// A new instance of the receiver indicating an unknown failure in the Apple Built-In reader.
+ (NSError * _Nonnull)scp_unknownAppleBuiltInReaderError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.invalidAmount</code>
///
/// returns:
/// A new instance of the receiver indicating an invalid amount was specified.
+ (NSError * _Nonnull)scp_invalidAmountError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.invalidCurrency</code>
///
/// returns:
/// A new instance of the receiver indicating an invalid currency was specified.
+ (NSError * _Nonnull)scp_invalidCurrencyError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.invalidTransactionType</code>
///
/// returns:
/// A new instance of the receiver indicating an invalid or incompatible transaction type was provided.
+ (NSError * _Nonnull)scp_invalidTransactionTypeError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.osVersionNotSupported</code>
///
/// returns:
/// A new instance of the receiver indicating that the OS on the device is too old or otherwise
/// does not support the Apple Built-In reader.
+ (NSError * _Nonnull)scp_osVersionNotSupportedError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.modelNotSupported</code>
///
/// returns:
/// A new instance of the receiver indicating that the device
/// does not support the Apple Built-In reader.
+ (NSError * _Nonnull)scp_modelNotSupportedError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.notReady</code>
///
/// returns:
/// A new instance of the receiver indicating the reader is not ready.
+ (NSError * _Nonnull)scp_readerNotReadyError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.unexpectedNil</code>
///
/// returns:
/// A new instance of the receiver indicating an unexpected <code>nil</code> was encountered in the SDK.
+ (NSError * _Nonnull)scp_unexpectedNilError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.readCanceled</code>
///
/// returns:
/// A new instance of the receiver indicating a read operation was canceled.
+ (NSError * _Nonnull)scp_readCanceledError SWIFT_WARN_UNUSED_RESULT;
/// Indicates that the receiver is in the Apple Built-in reader error domain.
@property (nonatomic, readonly) BOOL scp_isAppleBuiltInReaderError;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
#ifndef STRIPETERMINAL_SWIFT_H
#define STRIPETERMINAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="StripeTerminal",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class SCPLocalMobileConnectionConfiguration;
@protocol SCPAppleBuiltInReaderAccountLinkingDelegate;
@protocol SCPAppleBuiltInReaderPrepareDelegate;
@protocol SCPAppleBuiltInReaderTransactionDelegate;
enum SCPAppleBuiltInReaderTransactionType : NSInteger;
@class NSDecimalNumber;

/// Bridge class protocol for the Apple Built-In reader API.
/// The ProximityReader framework in which it is exposed leverages Swift Concurrency and is
/// not Objective-C compatible. The core of the Stripe Terminal SDK remains written in Objective-C.
/// This protocol defines and interface to convert between Swift Concurrency callbacks
/// and delegate callbacks.
/// A protocol is defined so that the on-device implementation and the iOS Simulator stub
/// implementation of the bridge expose a consistent interface. Further, the protocol
/// avoids duplication of documentation and common functionality.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderProtocol")
@protocol SCPAppleBuiltInReader <NSObject>
/// Determines whether the use of the Apple Built-In reader adapter is supported on the
/// current mobile device.
/// \param simulated Whether the check should be made against simulated readers.
///
///
/// throws:
/// An error with a best-effort determination as to why the specified
/// configuration is not supported on the running mobile device.
+ (BOOL)isSupportedWithSimulated:(BOOL)simulated error:(NSError * _Nullable * _Nullable)error;
/// Determines whether the current device supports Apple Built-In readers and, if so, returns
/// a set of the associated unique reader identifiers.
/// note:
/// An empty set of readers is never returned.
/// \param completion Invoked asynchronously.
/// If successful, invoked with a set of discovered reader identifiers.
/// If unsuccessful, invoked with an <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
+ (void)discoverAvailableReaderIdentifiersWithCompletion:(void (^ _Nonnull)(NSSet<NSString *> * _Nullable, NSError * _Nullable))completion;
/// This reader identifier is linked to the lifecycle of the merchant application on the device:
/// <ul>
///   <li>
///     When the application is uninstalled and re-installed, a new ID will be generated †
///   </li>
///   <li>
///     The ID is unique per merchant application installed on the same device
///   </li>
///   <li>
///     The ID is persisted between Reader initializations
///   </li>
///   <li>
///     When a merchant application initializes a Reader on two different devices,
///     each installation on each device will have a unique ID.
///   </li>
/// </ul>
/// † The ID will be reset only if all the apps from the same Vendor are uninstalled, with the following rule:
/// If the Vendor has multiple apps:
/// <ul>
///   <li>
///     com.example.app.app1
///   </li>
///   <li>
///     com.example.app.app2
///   </li>
/// </ul>
/// These 2 apps will have a different ID but their ID will only be reset if both app are uninstalled.
@property (nonatomic, readonly, copy) NSString * _Nonnull readerIdentifier;
/// Indicates whether the receiver is simulated or interacts with the ProximityReader framework.
@property (nonatomic, readonly) BOOL isSimulated;
/// Cached connection configuration provided by encompassing application
@property (nonatomic, readonly, strong) SCPLocalMobileConnectionConfiguration * _Nonnull connectionConfiguration;
/// Armada generated merchant reference associated with a Reader session
/// This reference string corresponds to the token used to initialize the reader,
/// and is needed in subsequent payment requests.
@property (nonatomic, copy) NSString * _Nullable merchantReference;
/// Delegate specific to the merchant account linking process.
@property (nonatomic, weak) id <SCPAppleBuiltInReaderAccountLinkingDelegate> _Nullable accountLinkingDelegate;
/// Delegate specific to the reader preparation process.
@property (nonatomic, weak) id <SCPAppleBuiltInReaderPrepareDelegate> _Nullable prepareDelegate;
/// Delegate specific to the process of performing a transaction.
@property (nonatomic, weak) id <SCPAppleBuiltInReaderTransactionDelegate> _Nullable transactionDelegate;
/// \param crid The unique identifier associated with the reader.
///
/// \param connectionConfiguration Local mobile connection configuration.
///
/// \param isSimulated A boolean indication the receiver should be created in simulation mode.
///
///
/// returns:
/// A new instance of the receiver, configured and optionally simulated.
- (nonnull instancetype)initWithReaderIdentifier:(NSString * _Nonnull)crid connectionConfiguration:(SCPLocalMobileConnectionConfiguration * _Nonnull)connectionConfiguration isSimulated:(BOOL)isSimulated;
/// Link the receiver using the specified token.
/// The linking process must be completed successfully prior to preparing the reader to collect payments.
/// note:
/// Not available on simulated readers.
/// \param token Reader token.
///
/// \param merchantReference Merchant reference.
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)linkAccountUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
/// Prepare the receiver to collect payments using the specified token.
/// Note that the account linking process must be completed successfully prior to preparing the
/// reader to accept payments.
/// note:
/// Not available on simulated readers.
/// \param token Reader token.
///
/// \param merchantReference Merchant reference.
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)prepareUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
/// Cancel an in-flight transaction.
/// note:
/// Not available on simulated readers.
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)cancelTransactionAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Perform a transaction.
/// note:
/// Not available on simulated readers.
/// \param amount Amount to charge or refund.
/// This should be a positive amount regardless of purchase or refund.
/// For a verification transaction type, value should be nil.
///
/// \param currencyCode Currencies are expressed as three character strings.
/// These will usually be ISO 4217 compliant, but are not guaranteed to be
/// (since not all currencies are expressable by ISO 4217).
///
/// \param transactionType The kind of the transaction. 
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)performTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
/// Capture a PIN for a previously completed transaction attempt.
/// note:
/// Not available on simulated readers.
/// note:
/// Uses the same delegate callbacks as <code>AppleBuiltInReaderProtocol.performTransaction(type:amount:currencyCode:)</code>
/// \param token Valid and signed PIN token.
/// The token is valid for no more than 55 seconds from issue.
/// This token is returned in the first attempt to confirm a payment which requires PIN capture.
///
/// \param cardReaderTransactionID Identifier of the transaction associated with the PIN
/// capture attempt. This value is returned as <code>paymentCardId</code> in the <code>AppleBuiltInReaderTransactionDelegate</code>’s
/// <code>appleBuiltInReader(_:didCollectPaymentCard:generalCardData:paymentCardId:merchantReference:)</code>
/// delegate method.
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)capturePINUsingToken:(NSString * _Nonnull)token cardReaderTransactionID:(NSString * _Nonnull)cardReaderTransactionID error:(NSError * _Nullable * _Nullable)error;
/// Perform a mock transaction.
/// \param amount Amount to charge or refund.
/// It should be a positve amount regardless of purchase or refund.
/// For a verification transaction type, value should be nil.
///
/// \param currencyCode Currencies are expressed as three character strings.
/// These will usually be ISO 4217 compliant, but are not guaranteed to be
/// (since not all currencies are expressable by ISO 4217).
///
/// \param transactionType The kind of the transaction. 
///
///
/// throws:
/// <code>NSError</code> in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
- (BOOL)performMockTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
@end


/// The ProximityReader framework is not available when building for iPhone Simulator.
/// This stub implementation of the Apple Built-In Reader protocol exposes the same API as the
/// version that runs on device - but only supports simulated readers and does not
/// reference the ProximityReader framework.
/// note:
/// Like the on-device implementation, iOS 16.0 or later is required.
/// seealso:
/// AppleBuiltInReaderProtocol
SWIFT_CLASS_NAMED("AppleBuiltInReader")
@interface SCPAppleBuiltInReader : NSObject <SCPAppleBuiltInReader>
+ (BOOL)isSupportedWithSimulated:(BOOL)simulated error:(NSError * _Nullable * _Nullable)error;
+ (void)discoverAvailableReaderIdentifiersWithCompletion:(void (^ _Nonnull)(NSSet<NSString *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)initWithReaderIdentifier:(NSString * _Nonnull)crid connectionConfiguration:(SCPLocalMobileConnectionConfiguration * _Nonnull)connectionConfiguration isSimulated:(BOOL)isSimulated OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull readerIdentifier;
@property (nonatomic, readonly) BOOL isSimulated;
@property (nonatomic, readonly, strong) SCPLocalMobileConnectionConfiguration * _Nonnull connectionConfiguration;
@property (nonatomic, copy) NSString * _Nullable merchantReference;
@property (nonatomic, weak) id <SCPAppleBuiltInReaderAccountLinkingDelegate> _Nullable accountLinkingDelegate;
@property (nonatomic, weak) id <SCPAppleBuiltInReaderPrepareDelegate> _Nullable prepareDelegate;
@property (nonatomic, weak) id <SCPAppleBuiltInReaderTransactionDelegate> _Nullable transactionDelegate;
- (BOOL)linkAccountUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
- (BOOL)prepareUsingToken:(NSString * _Nonnull)token merchantReference:(NSString * _Nonnull)merchantReference error:(NSError * _Nullable * _Nullable)error;
- (BOOL)cancelTransactionAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)performTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
- (BOOL)capturePINUsingToken:(NSString * _Nonnull)token cardReaderTransactionID:(NSString * _Nonnull)cardReaderTransactionID error:(NSError * _Nullable * _Nullable)error;
- (BOOL)performMockTransactionWithType:(enum SCPAppleBuiltInReaderTransactionType)transactionType amount:(NSDecimalNumber * _Nullable)amount currencyCode:(NSString * _Nonnull)currencyCode error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Delegate methods pertaining to the process of linking a merchant account.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderAccountLinkingDelegate")
@protocol SCPAppleBuiltInReaderAccountLinkingDelegate <NSObject>
/// The specified merchant account was successfully linked.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidLinkAccount:(id <SCPAppleBuiltInReader> _Nonnull)reader;
/// The specified merchant account was already successfully linked with the receiver.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidPreviouslyLinkAccount:(id <SCPAppleBuiltInReader> _Nonnull)reader;
/// An error occurred while attempting to link the specified merchant account with the receiver.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToLinkAccountWithError:(NSError * _Nonnull)error;
@end

/// The ProximityReader framework exports a few different error enumerations, however they are
/// not Objective-C compatible. This enumeration is an Objective-C compatible superset of all relevant errors from the
/// the ProximityReader framework.
typedef SWIFT_ENUM_NAMED(NSInteger, SCPAppleBuiltInReaderErrorCode, "AppleBuiltInReaderErrorCode", open) {
/// An unknown error.
  SCPAppleBuiltInReaderErrorCodeUnknown = 0,
/// An SDK error indicating that an unexpected <code>nil</code> value was encountered.
  SCPAppleBuiltInReaderErrorCodeUnexpectedNil = 1,
/// An invalid transaction type was specified for the current operation.
  SCPAppleBuiltInReaderErrorCodeInvalidTransactionType = 2,
/// The mobile device must have a passcode enabled to use the Apple Built-In reader.
  SCPAppleBuiltInReaderErrorCodePasscodeDisabled = 3,
/// Usually indicates entitlement, invalid application bundle, configuration issue or partner token issue.
  SCPAppleBuiltInReaderErrorCodeNotAllowed = 4,
/// It is not possible to interact with the Apple Built-In reader while the app is backgrounded.
  SCPAppleBuiltInReaderErrorCodeBackgroundRequestNotAllowed = 5,
/// Unsupported hardware, problem with the device.
  SCPAppleBuiltInReaderErrorCodeUnsupported = 6,
/// Current OS version is not supported.
  SCPAppleBuiltInReaderErrorCodeOsVersionNotSupported = 7,
/// Device model is not supported.
  SCPAppleBuiltInReaderErrorCodeModelNotSupported = 8,
/// Network error, unable to reach server.
  SCPAppleBuiltInReaderErrorCodeNetworkError = 9,
/// Authentication during connection to server
  SCPAppleBuiltInReaderErrorCodeNetworkAuthenticationError = 10,
/// Unable to connect to internal service.
  SCPAppleBuiltInReaderErrorCodeServiceConnectionError = 11,
/// Reader session is not ready. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeNotReady = 12,
/// Reader token not valid, cannot be empty.
  SCPAppleBuiltInReaderErrorCodeEmptyReaderToken = 13,
/// Reader token not valid, check description for more details.
  SCPAppleBuiltInReaderErrorCodeInvalidReaderToken = 14,
/// Prepare failed, config setup issues. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodePrepareFailed = 15,
/// Reader session expired, too long since last used. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodePrepareExpired = 16,
/// Reader token is expired. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeTokenExpired = 17,
/// This device cannot be used to process using the Apple Built-In reader anymore.
  SCPAppleBuiltInReaderErrorCodeDeviceBanned = 18,
/// Reader internal memory full.
  SCPAppleBuiltInReaderErrorCodeReaderMemoryFull = 19,
/// Reader is busy, unable to prepare the reader. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeReaderBusy = 20,
/// The merchant account is not linked. Link the account and re-initialize the connection.
  SCPAppleBuiltInReaderErrorCodeAccountNotLinked = 21,
/// Failed to link merchant to this Apple ID. Ensure Apple ID is still active and in a good standing and try again.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingFailed = 22,
/// Linking the merchant requires iCloud sign in.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingRequiresiCloudSignIn = 23,
/// An error indicating the user cancelled the linking operation.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingCancelled = 24,
/// An error that indicates the system couldn’t check the account status of the merchant.
  SCPAppleBuiltInReaderErrorCodeAccountLinkingCheckFailed = 25,
/// Merchant is blocked.
  SCPAppleBuiltInReaderErrorCodeMerchantBlocked = 26,
/// Merchant is invalid.
  SCPAppleBuiltInReaderErrorCodeInvalidMerchant = 27,
/// Read not allowed at this time. Validate entitlements to proceed.
  SCPAppleBuiltInReaderErrorCodeReadNotAllowed = 28,
/// It is not possible to interact with the Apple Built-In reader while the app is backgrounded.
  SCPAppleBuiltInReaderErrorCodeReadFromBackgroundError = 29,
/// Unable to connect to internal UI or other services.
  SCPAppleBuiltInReaderErrorCodeReaderServiceConnectionError = 30,
/// General reader service internal state issue, unexpected error, etc…
  SCPAppleBuiltInReaderErrorCodeReaderServiceError = 31,
/// No reader session or not ready. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeNoReaderSession = 32,
/// Reader session expired and unable to refresh. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeReaderSessionExpired = 33,
/// Unable to refresh reader session as configuration token is expired. The reader connection must be re-initialized.
  SCPAppleBuiltInReaderErrorCodeReaderTokenExpired = 34,
/// Unable to refresh reader session due to network error.
  SCPAppleBuiltInReaderErrorCodeReaderSessionNetworkError = 35,
/// Auth error, while refreshing reader session.
  SCPAppleBuiltInReaderErrorCodeReaderSessionAuthenticationError = 36,
/// Reader is busy with another session. Try again later.
  SCPAppleBuiltInReaderErrorCodeReaderSessionBusy = 37,
/// Current read or reader session cancelled.
  SCPAppleBuiltInReaderErrorCodeReadCancelled = 38,
/// Invalid amount, must be a positive.
  SCPAppleBuiltInReaderErrorCodeInvalidAmount = 39,
/// Invalid or unsupported currency code.
  SCPAppleBuiltInReaderErrorCodeInvalidCurrency = 40,
/// NFC is disabled. NFC must be enabled to proceed.
  SCPAppleBuiltInReaderErrorCodeNfcDisabled = 41,
/// It is not possible to interact with the Apple Built-In reader while the app is backgrounded.
  SCPAppleBuiltInReaderErrorCodeReadNotAllowedDuringCall = 42,
/// An error occurred while attempting to read the payment card.
  SCPAppleBuiltInReaderErrorCodeCardReadFailed = 43,
/// Unable to proceed with payment read due to internal failure.
  SCPAppleBuiltInReaderErrorCodePaymentReadFailed = 44,
/// The payment card declined the transaction.
  SCPAppleBuiltInReaderErrorCodePaymentCardDeclined = 45,
/// The preferred AID specified in the transaction request is invalid.
  SCPAppleBuiltInReaderErrorCodeInvalidPreferredAID = 46,
/// An error occurred when capturing the PIN.
  SCPAppleBuiltInReaderErrorCodePinEntryFailed = 47,
/// An error that indicates an invalid PIN token.
  SCPAppleBuiltInReaderErrorCodePinTokenInvalid = 48,
/// The current PIN capture was not completed in allowed time.
  SCPAppleBuiltInReaderErrorCodePinEntryTimeout = 49,
/// The current PIN capture was cancelled, also cancelling any ongoing read operation.
  SCPAppleBuiltInReaderErrorCodePinCancelled = 50,
/// The time window allowing for a PIN capture after a card read has expired.
  SCPAppleBuiltInReaderErrorCodePinNotAllowed = 51,
};


/// Delegate methods pertaining to the process of preparing an Apple Built-In reader.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderPrepareDelegate")
@protocol SCPAppleBuiltInReaderPrepareDelegate <NSObject>
/// The receiver reported progress during the preparation step.
/// \param reader Apple Built-In reader.
///
/// \param progress Reader preparation progress in the range (0, 1).
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didReportPrepareProgress:(float)progress;
/// The receiver was prepared successfully.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidPrepare:(id <SCPAppleBuiltInReader> _Nonnull)reader;
/// The receiver could not be prepared successfully.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToPrepareWithError:(NSError * _Nonnull)error;
@end


@class SCPAppleBuiltInReaderTransactionEvent;

/// Delegate methods pertaining to carrying out transactions.
SWIFT_PROTOCOL_NAMED("AppleBuiltInReaderTransactionDelegate")
@protocol SCPAppleBuiltInReaderTransactionDelegate <NSObject>
/// An attempt to perform a transaction completed successfully.
/// \param reader Apple Built-In reader.
///
/// \param data Encrypted EMV blob associated with the payment card suitable for transaction processing.
///
/// \param generalCardData Un-encrypted EMV blob associated with the payment card.
///
/// \param paymentCardId An identifier associated with the payment card.
///
/// \param merchantReference Merchant reference.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didCollectPaymentCard:(NSString * _Nullable)data generalCardData:(NSString * _Nullable)generalCardData paymentCardId:(NSString * _Nonnull)paymentCardId merchantReference:(NSString * _Nonnull)merchantReference;
/// An attempt to perform a transaction failed.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToPerformTransaction:(NSError * _Nonnull)error;
/// The receiver reported a transaction event.
/// \param reader Apple Built-In reader.
///
/// \param event A model describing a step in the transaction flow.
/// Not suitable for presentation to a user.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didReportTransactionEvent:(SCPAppleBuiltInReaderTransactionEvent * _Nonnull)event;
/// An attempt to cancel a transaction failed.
/// \param reader Apple Built-In reader.
///
/// \param error A description of the failure in the <code>SCPAppleBuiltInReaderErrorDomain</code>.
///
- (void)appleBuiltInReader:(id <SCPAppleBuiltInReader> _Nonnull)reader didFailToCancelTransaction:(NSError * _Nonnull)error;
/// A mock transaction completed successfully.
/// \param reader Apple Built-In reader.
///
- (void)appleBuiltInReaderDidCompleteMockTransaction:(id <SCPAppleBuiltInReader> _Nonnull)reader;
@end

enum SCPAppleBuiltInReaderTransactionEventCode : NSInteger;

/// Apple Built-In Reader Transaction Event.
/// This class wraps a transaction event code and associated metadata into an Objective-C
/// compatable object representation.
SWIFT_CLASS_NAMED("AppleBuiltInReaderTransactionEvent")
@interface SCPAppleBuiltInReaderTransactionEvent : NSObject
/// The name of the reader transaction event suitable for logging.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Transaction event code.
@property (nonatomic, readonly) enum SCPAppleBuiltInReaderTransactionEventCode code;
///
/// returns:
/// A new instance of the receiver configured with an <code>unknown</code> event.
- (nonnull instancetype)init;
- (BOOL)isEqualToTransactionEvent:(SCPAppleBuiltInReaderTransactionEvent * _Nonnull)other SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copy SWIFT_WARN_UNUSED_RESULT;
@end

/// This enumeration is an Objective-C compatible representation of all transaction-related events
/// re-exported from the ProximityReader framework.
typedef SWIFT_ENUM_NAMED(NSInteger, SCPAppleBuiltInReaderTransactionEventCode, "AppleBuiltInReaderTransactionEventCode", open) {
/// Unknown reader event code.
  SCPAppleBuiltInReaderTransactionEventCodeUnknown = 0,
/// The reader is ready for someone to move their card within range of the iPhone.
  SCPAppleBuiltInReaderTransactionEventCodeReadyForTap = 1,
/// The reader detected the presence of a card.
  SCPAppleBuiltInReaderTransactionEventCodeCardDetected = 2,
/// The consumer can move the card away from the device.
  SCPAppleBuiltInReaderTransactionEventCodeRemoveCard = 3,
/// The reader completed the card read process.
  SCPAppleBuiltInReaderTransactionEventCodeCompleted = 4,
/// A visual indication has been presented requesting the customer try again.
  SCPAppleBuiltInReaderTransactionEventCodeRetry = 5,
/// A read operation was canceled.
  SCPAppleBuiltInReaderTransactionEventCodeReadCanceled = 6,
/// The read operation did not complete.
  SCPAppleBuiltInReaderTransactionEventCodeReadNotCompleted = 7,
/// PIN entry was requested.
  SCPAppleBuiltInReaderTransactionEventCodePinEntryRequested = 8,
/// PIN entry was completed.
  SCPAppleBuiltInReaderTransactionEventCodePinEntryCompleted = 9,
};

/// The kind of a transaction.
typedef SWIFT_ENUM_NAMED(NSInteger, SCPAppleBuiltInReaderTransactionType, "AppleBuiltInReaderTransactionType", open) {
  SCPAppleBuiltInReaderTransactionTypeUnknown = 0,
/// Charge the specified amount.
  SCPAppleBuiltInReaderTransactionTypePurchase = 1,
/// Refund the specified amount.
  SCPAppleBuiltInReaderTransactionTypeRefund = 2,
/// Perform card verification.
  SCPAppleBuiltInReaderTransactionTypeVerification = 3,
};


@interface NSError (SWIFT_EXTENSION(StripeTerminal))
/// Apple Built-In reader error domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorDomain;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info error name key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoNameKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoNameKey SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info reader message key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoReaderMessageKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoReaderMessageKey SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info device banned until date key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoDeviceBannedUntilDateKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoDeviceBannedUntilDateKey SWIFT_WARN_UNUSED_RESULT;
/// Apple Built-In reader error User Info device prepare failed reason key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull scp_appleBuiltInReaderErrorUserInfoPrepareFailedReasonKey;)
+ (NSString * _Nonnull)scp_appleBuiltInReaderErrorUserInfoPrepareFailedReasonKey SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.unknown</code>
///
/// returns:
/// A new instance of the receiver indicating an unknown failure in the Apple Built-In reader.
+ (NSError * _Nonnull)scp_unknownAppleBuiltInReaderError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.invalidAmount</code>
///
/// returns:
/// A new instance of the receiver indicating an invalid amount was specified.
+ (NSError * _Nonnull)scp_invalidAmountError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.invalidCurrency</code>
///
/// returns:
/// A new instance of the receiver indicating an invalid currency was specified.
+ (NSError * _Nonnull)scp_invalidCurrencyError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.invalidTransactionType</code>
///
/// returns:
/// A new instance of the receiver indicating an invalid or incompatible transaction type was provided.
+ (NSError * _Nonnull)scp_invalidTransactionTypeError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.osVersionNotSupported</code>
///
/// returns:
/// A new instance of the receiver indicating that the OS on the device is too old or otherwise
/// does not support the Apple Built-In reader.
+ (NSError * _Nonnull)scp_osVersionNotSupportedError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.modelNotSupported</code>
///
/// returns:
/// A new instance of the receiver indicating that the device
/// does not support the Apple Built-In reader.
+ (NSError * _Nonnull)scp_modelNotSupportedError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.notReady</code>
///
/// returns:
/// A new instance of the receiver indicating the reader is not ready.
+ (NSError * _Nonnull)scp_readerNotReadyError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.unexpectedNil</code>
///
/// returns:
/// A new instance of the receiver indicating an unexpected <code>nil</code> was encountered in the SDK.
+ (NSError * _Nonnull)scp_unexpectedNilError SWIFT_WARN_UNUSED_RESULT;
/// seealso:
/// <code>AppleBuiltInReaderErrorCode.readCanceled</code>
///
/// returns:
/// A new instance of the receiver indicating a read operation was canceled.
+ (NSError * _Nonnull)scp_readCanceledError SWIFT_WARN_UNUSED_RESULT;
/// Indicates that the receiver is in the Apple Built-in reader error domain.
@property (nonatomic, readonly) BOOL scp_isAppleBuiltInReaderError;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
